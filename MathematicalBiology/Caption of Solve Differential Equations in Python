Caption (unproofread) of Solve Differential Equations in Python (https://www.youtube.com/watch?v=VV3BnroVjZo&feature=emb_logo, accessed Dec 9, 2020), grabbed via https://www.diycaptions.com Dec 9, 2020.

this is a tutorial on how to solve differential equations in Python we're going to use the side PI integrate package called OD e int or OD integrator and there are three arguments for that one is our model function the next one is a initial condition for our state's and then the time where we want to solve okay and we have an example differential equation where we have the derivative of Y with respect to time equals negative constant K times the state Y now Y of T in this case does not mean Y times T okay it actually is y is a function of time and we want to try to solve that where we have time and y of T and we want to be able to see what that looks like over time so we want to come up with a numerical solution to integrate this differential equation and we're going to use the OD int package for that a couple things that we'll need just as we get started is well first of all just import numpy that's gonna be a base package that we use with many different functions here is our Eau de int you can just copy these lines and this one it's from scipy I'd integrate import OD e int if you say import sci fi for example you would have to do site to use that function you test you site PI dot integrate dot o de int so to shorten that we're just going to import the OD and function and then we'll also want our matplotlib for plotting and so we'll import PI plot as PLT okay so the very first thing that we want to do is define our function and here is our model where our function returns the derivative values dy DT as as we give it different Y values and T values so basically you can think of the function as a pox and what you put in our different Y values and T values and what you get out our DUI DT and this is what OD int is going to need to be able to solve for y of T and so if you think about this is kind of in simplistic terms let's say you're going out hiking up a hill and you want to be able to determine what the shape of that hill is so let's just say elevation with respect to time that you're hiking or it could be distance for example if you took the derivative with respect to distance and at a certain point you look at you can only maybe look straight down and you look at the slope okay and dy DT right here might be zero and so you know you're not climbing but as you come to this point right here dy DT is going to be positive and you don't know there's a big drop-off right at that point you could only look down and so let's make this a little less steep okay and at this point you see that dy DT is negative and so you know it's starting to go down so that's essentially what this function is doing is just trying to map out what is Y of T and it has these inputs right here Y and T and then we return the derivative value add that wine to you okay so we have a couple other things that are required for OD and we have an initial condition as well let's give that initial condition of five and then we want to define some time points as well so you can have a third argument to this as well like 50 time points we'll have a start finish and then the number timepoints okay so start and and then the number of time boys by default it's fifty but you put that a thousand if you want to be a little bit more smooth for example it's just gonna take a little bit longer to compute so linspace has linearly spaced points between the start and the end with a number of time points there so that's gonna go right in here for our third argument our second argument is going to be this initial condition that's gonna be five you could just put a five there if you wanted and then model right here you don't to put quotes around it or anything it's just the name of that function okay and what's going to be returned is our y-value that's going to be Y of T and then we just simply want to plot it PLT dot plot T comma Y our T is our x-axis and Y's or y-axis and then I just put an X label and a white label and then I show the plot you don't have to do that in if you're using like a Jupiter notebook okay and there is our plot right there so I encourage you to go just make sure this works on your system that you have Syfy installed correctly and you can use numpy as well okay so we can also do things like pass additional arguments into our functions like let's say we don't know the value of K we had determined that before but let's say we want to have our function be able to accept different values of K so that's gonna change our equation slightly and so the only thing that we need to do differently in this is just put in the new fourth argument fourth input to our system or we say Rx equals K now you can't just say args equals K you have to do this funny thing called a tuple okay where normally if you had you know K 1 K 2 you know K 3 so these are the round parentheses here and you would normally define those as a sequence of inputs if you only have one of them the and you just have to leave that blank it's kind of funny notation but just leave that blank with a comma there because it's expecting multiple values coming in but you'll have one okay and the future may have multiple but if you don't just use this type of syntax okay so we have different values of K and then we want to record those as y1 y2 and y3 and then we're just going to plot all of those those three lines right there plotting y1 y2 and y3 as a red line a blue dashed line and a green dotted line and I'm also going to put in a label to be able to know which ones those are and you can make a legend with that I also like to do some times inside that parentheses there location equals best and then it'll pick the best location for the legend I didn't do that this time so it's going to default into the upper right corner which looks like it's okay okay so there's our same solution that we had before but now k equals point one point two and point five and so you can see that the higher the K value the more quickly it decays to this value of 0 but all of these would continue on and decay to a value of 0 okay so there's our solution with OD e int you can solve multiple differential equations at the same time I'll show you in some of these examples below okay so here's problem one we're going to try to integrate this system right here and so let's go ahead and just start from scratch now on the now go and try this yourself and then if you get stuck come to the course website and go to the PDC website and then if you come down here on the right this is solve with OD E and here's all the material for that the exercises that we just went through and you'll see a little button right here that says show solution okay so you can kind of see the here is you know some of this the source code for this so very similar to what we've already solved so I'll click the get code just copy that and so for this first one I'm just gonna copy that I'll create a new text I call this problem one dot py okay if you don't have extensions and just come to view options if you can see the dot py there it looks like a text document still and then go to view and unselect hide extensions for known file types and then you'll be able to when you click apply you'll be able to see the extent shouldn't be able to change out to a Python file okay so I'm just going to edit it with three point six okay Python three point six and so let's see if this will run okay let's see if I've seen any modules here okay so it's gonna run and then hopefully show the figure okay so there is the figure right there I just included just like we showed before we had the differential equation we basically just had to modify this line right here from the prior example and then maybe also change our final time so we could see you know the region that we were interested in so I went from zero to five I solved it with this Oh deviant function with model y naught and T and then just plot it okay so fairly basic and straightforward okay now we're gonna get to something just a little bit more complicated okay so I'm going to do a save as I'll save this as problem to this and this time I'm not going to use the solution so let's try to work through this together okay so you steps from zero to two at time 10 and the very first thing that we notice over here is that we have a 5 that our function needs to be able to return dy/dt so let's just go ahead and divide both sides by 5 and this is going to then cancel and we'll have a function of dy DT with an initial condition equal to 1 so let's change our initial condition to 1 and then we have minus y plus U and I'll go ahead and divide by 5 as well I like to you 5.0 to force it to be a floating point now that's not a big a problem with Python 3.6 but 2.7 it did really funny integer division stuff ok I'm just going to put an if statement here if T is less than 10 then we're gonna say that U is going to be equal to 0 and else U is equal to to make those floating-point numbers with the dot 0 okay and then I return the dy/dt so I just had to put a little bit of logic in here an if statement and so it's gonna step from 0 to 2 and let's go a little bit further into the future I'll go up to 35 and solve this okay here goes problem 2 and there you can see that it you know started an initial condition one was going to decay to a value of 0 like we had seen you know before and the in that case changed you had an input step change to the U value change to 2 immediately and this started to come up to that value of 2 okay so we had a change in one of our parameters at a certain time now because you have T's coming in as an input we can use that to make decisions about what value should be at different times okay and don't forget you have to put you have to isolate you know your derivative on the left-hand side of the equation and put all of the terms on the right-hand side of the equation that function needs to be able to return dy DT okay so we've got another one we've got two differential equations here so let's see if we can solve those in the same function together okay here's save this as problem three okay and here is mmm let's see I'm gonna just combine these into one value Z I'm going to change that name and then when it comes in I'm going to say that X is equal to Z 0 and y is equal to Z 1 so I may be is gonna be two elements not just a single value but it's going to be an array values and then I'm gonna have two derivative values as well so I have DX DT and that's going to be equal to three times I have to use the numpy or the math function for exp and that's going to be minus T and then we have dy DT and that's going to be three minus y now I don't put Y of T it just could be minus y okay whereas the exponent up there is a function of so that you do put the negative T in there but here you do not put in like T right there okay it's just gonna be Y okay and then instead of just returning dy DT I want to return two things so I'm gonna put a list here of things I want to return so I'm going to return two values and and then I have my initial conditions I'm going to do Z and that's going to be equal to two different values zero and zero so this is our my X naught and my Y naught right there okay and then I'm going to be going up to let's just go up to 10 in this case see how that works and then instead of returning Y min returning Z that's a combination of the XS and the Y's and and let's just get to that point right there I'm gonna comment out this and let's just see what it returns and let's see if I have any errors here first of all okay and so it finished here all of my Z values okay so looks like they're fairly equivalent but let's break those into two different vectors here so I'm going to just take my all of my rows I put my coal in there I might get just my first column and that's gonna be X and then Y is going Y is going to be all of my rows with my second column which is going to be one and then I can plot the results so let's go ahead and put both of these on to the plots and so I'm gonna have X and let's go ahead and make that a red line and let's do our Y value and make this a dashed line so we can see what's underneath it and then I want some labels here as well and let's see I'm gonna have X of T comma Y y of T and I think that's right I'll probably have an air but gonna fix as it comes up okay they're very good so they're equivalent oh you know what I should have just done something like legend alright y'all the legend instead of Y let's see if that turns out any better okay so it looks a little bit better I've got the X of T and the y of T there okay so you can see that those two are equivalent you can see the values they went to this is a demonstration of how to put in solve multiple differential equations together and then we basically just have to combine the initial conditions and you know define our time points the same way and then what gets returned is just two column vectors or you know multiple columns of of values that are basically the X of T and Y of T and then I'm just separating those out and then plotting those two okay so I had to let's go into the final one now here's a one where we have a step input change but we also have two differential equations so not very different from what we just solved don't forget to move the 2 and the 5 to the other side of the equation ok and then we have a step function change from zero to two at time equals five so s of T is just this step function that changes from 0 to 1 at time equals 5 that when you multiply it by 2 then ok when you multiply this by 2 then it's gonna go to a you know it's just basically a step of two okay and then we have these initial conditions right here as well so let's just modify this script it's pretty close to what we need already but I should probably save this as problem for ok let's say this is problem for and and go into this we have equals negative x plus you okay / - and then this one is going to be negative y plus X divided by five okay so I've got my function defined and then I want to put in let's say the value of U right there and let's have that be an input will define the U value outside of this okay so I'm gonna have let's do a hundred points and I'll just say and equals a hundred because we're going to use in later as well a hundred points and then I need to create some new vectors here I have my initial condition already and that's those are going to be 0 0 like we had before but now I want to create a new you value and so I'll just say numpy zeros and I'll say that's going to be 100 zeros ok so just a list of 100 zeros but I want to change that at time equals 5 ok so there's about 10 points per let's see let's go out to mmm I'm gonna go up to a 150 maybe do you up to 15 time and then I'll have a hundred 50 time points and so each one is still good each time period one second for example is going to be ten points and so we want to change you after T equals five so that's gonna be 51 ok 51 on is going to be equal to two ok so I've set up my input my u value I have my time and I have the number of time points now let me go ahead and set up X as well and I'll just say that is going to be zeros and and why is zeros and and so instead of just solving the OD in one time step I'm gonna set up a loop for I in range end and I'm gonna go from one to end because I have the initial conditions already that are equal to zero okay so I don't need to solve for time step 0 because those are already defined as zeros and then as I go through this I'm gonna have an argument that is going to be my you I value okay and I'm going to just integrate it one time step so I need to set up a time span is going to be equal to t I let's see if I can get this right i - 1 - t i so i'll show you these vectors as we go through it just so you can see but basically i'm just taking one time step at a time i'm gonna integrate it and that allows me to have different inputs at every time step okay and then after i finish that integration i want to get my new initial condition for the next time it loops through that and so i'm just going to take the the end point so i can do that with z negative 1 by no there's only two steps here because i defined it as here's my starting point that i want to value for and here's my ending point so i'm just going to take the the second time point second row in that z solution and so that's just going to be z1 and then i want to instead of defining all of my X's all at once I'm just going to say that X I let's see if I can do this X is equal to Z naught and I'm going to have that be the first element of Z naught and then why I equals Z naught that's the second element of Z naught so I'm just going to record those and then we'll plot them and let's also include a plot of you in there and we will do that as a black dotted line okay and I'll just include that here U of T okay um I think that should be about it so let's go ahead and simulate this and just see what does I'll break it down into a couple more steps for you in case you didn't pick up on some of that I'll also try to work through any errors that came up in the process okay so it's going to simulate it and you can see you steps up from zero to two at time five and then you can see the value of x and also the value of y as we're integrating those and so what what we may want to do is just come in here and show a couple of the when I run it again we're going to close the plot and then let's go back to the command line and see some of these values okay so the very last time it ran through that loop there was the time span it went from fourteen point nine to fifteen okay so that was the very last one that it did so integrated up to fifteen but that was the last time segment okay Z naught it said there's my value of x and my value of y that's my initial condition if I were to loop through one more time it would have used those as the Z naught initial condition so what I'm doing is looking at values after finished all of these loops that it went through and range 1 to 150 and integrated and stored all those values in X&Y okay so here's X right here you could just see it's a list of values of 0 before that step change happened and then also why okay so why I make this just a little bit small move it up so I can see it okay and then y is going to be let me do a print on Y and I'll just print from zero to ten and those should all be zeros but if I do print Y from you know 120 to 130 now I'm going to see those values we're changing every time it looped through it got an additional value of y in that list okay so show it a couple other things it's probably the most complex example that we've covered so far we broke this down into a loop and just integrated for one time step at a time as we went through this there's our integration with this optional argument U and then we had our initial condition Z naught that we defined here and that was going to be plugged back in here as our initial condition and then it will compute a new Z value but before we erase that Z naught value or change it again we need to record those so that we could plot them down here as X&Y okay so there is our final example just a little bit more complicated on problem four and then what we'll do is we'll give you as a homework problem as this is our challenge problem then is to simulate HIV now this is a human immunodeficiency virus HIV they can develop into acquired immunodeficiency syndrome or AIDS and fortunately there's a lot of very good antiretroviral drugs that can prevent this transition and allow patients to lead healthy life here are some initial conditions for our state's and then you have three equations so what you're going to try to do is integrate these just like we did the two equations you're gonna have a third equation now you're gonna have some parameters here that K R 1 through K R 6 and you know this might be a patience some data for a patient not treated with anti retrovirals over the course of 15 years you can see some maybe some some data points on how the virus spreads through the bodies transitions to AIDS so I want you to try to simulate this these three differential equations with these parameters and see if you can come up with a plot that looks similar to this make sure you plot it on a semi-log Y plot so you may need to search do an internet search to figure out how to do that okay there's a couple references as well with a couple links but you should have enough information on how to set up and solve multiple differential equations that are solved together
